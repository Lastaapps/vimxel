# VimXel

VimXel je jednoduchý tabulkový procesor určený pro terminál. K tomu bude
využita knihovna ncurses.

Buňky podporují
- literály (čísla, řetězce)
- řetězec začínající '=' obsahuje výraz

Výrazy podporují
- základní matematické operátory
- závorky ()[]{}
- známé konstanty pi, e, rychlost světla ve vakuu c a zlatý řez gr
- funkce nad nad jinými výrazy
    - goniometrické sin, cos, tg, cotg a inverze
    - absolutní hodnotu abs
    - spojování textových literálů a čísel concat
    - mocnění pow a sqrt
    - exponenciála a přirozený logaritmus
    - zaokrouhlení round, ceil, floor, teil
    - velikost textu lower a uppper
- agregační funkce
    - součet oblasti sum
    - průměrná hodnota oblasti avg
    - extrémy oblasti max, min
- odkaz na jiné buňky pomocí adres ve formátu A1 či A1:B2

Některé funkce mohou přijímat neomezený počet parametrů podobných typů.
Například max může přijmout 4 oblasti a 3 čísla a až z nich vybrat největší.

Výrazy se automaticky aktualizují, pokud dojde ke změně hodnoty buňky. Dále
jsou chráněny proti zacyklení, taková hodnota nepůjde vložit.

Tabulka jde uložit do formátu .vimcsv, z kterého půjdou načíst původní výrazy.

Tabulka jde exportovat do formátu .cvs, kde budou místo výrazů jejich hodnoty
jako v zobrazené tabulce.

Ovládání bude možné pomocí klávesnice, VimXel již podle jména musí podporovat
alespoň základní syntaxi programu vi. Bude mít módy Normal, Insert a Command.

Některé funcionality převzané z vi
- Pohyb v buňkách:    h, j, k, l
- Jít na pozici       :A1
- Smazíní buňky       x
- Uložit a uzavřít    :wq, :q, :q!, :w
- Upravit buňku       i, Esc
- A mnohé další


### Progtest
Jednoduchý spreadsheet

Vytvořte aplikaci implementující jednoduchý tabulkový editor.

Buňky pro váš spreadsheet musí podporovat
- literály (čísla, řetězce, ...)
- základní operátory: +, -, *, /
- alespoň 4 jednoduché funkce: sin, abs, concat, ...
- odkaz na jinou buňku: = A2 + abs(B1)

Buňky musí upravovat svůj obsah na základě změn odkazovaných buněk.

Buňka musí detekovat cykly a nesmí dovolit vytvořit výraz, který by cyklus způsobil.

Vytvořená tabulka musí jít uložit do souboru a opětovně zase načíst. Navrhněte vhodnou reprezentaci.

Buňky dále musí implementovat alespoň 1 z těchto funkcionalit:
- zpracovávat výrazy se závorkami
- agregační funkce přes sloupce, řádky a oblasti: avg(A2:A8), max(B1:C10)
- vykreslení grafu přes sloupce, řádky nebo oblasti

Použití polymorfismu (doporučeně)
- typy buněk: číslo, řetězec, výraz, funkce, ...
- grafické rozhraní: konzole, ncurses, SDL, OpenGL, ...
- různé druhy grafů

### Přidáno
- export do cvs
- funkce navíc
- funkce s neomezeným počtem parametrů
- konstanty
- navigace a ovládání pomocí základní vi syntaxe



## Návrh polymorfismu

### Buňky
různé druhy buňek
- prázdná
- s obsahem, tj. textová/číselná

### Výrazy Výraz bude převeden na binární strom, který bude postupně
vyhodnocován.  Každý node stromu může být
- nosič termu
- operátor
    ***
    - binární operátor nebo funkce
        - +, -, *, /
        - pow, sqrt, ...
    - unární operátor nebo funkce
        - +, -
        - sin, arcsin, ...
        - exp, ln, ...
        - lower, upper
    - funkce n proměnných
        - avg, sum, ...
        - concat

*** Dělení na operátory na číslech, textech a oblastích zde pro jednoduchost
vynechám. Takovéto dělení mi umožní kontrolovat vstupy na 1 místě a v nodech
provádět pouze výpočty, nekontrolovat typ vstupů.

Každý node má metodu getValue(), která vypočte hodnotu za použití getValue()
svých potomků.

### Term
Term může být
- číslo (floating)
- text
- skupina termů (oblast tabulky)

### A další
- různé druhy chyb
- různé dekodéry vtupu z klávesnice podle Vim módu
- nadřída drawer poskytující společné rozhraní pro vyhreslování jednotlivých částí UI
- různé payloady tokenů při parsování výrazu buňky
